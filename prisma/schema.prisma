generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
    shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations    
}
model App {
    id String @id

    name          String
    type          Int
    visibility    Visibility
    status        AppStatus
    workspacePath String     @unique
    profilePath   String     @unique
    createdAt     DateTime?  @default(now())
    lastUpdate    DateTime?
    icon          String?
    metadata      Json?

    userRoleAssignment UserRoleAssignmentMap[]
    submissions        AppSubmission[]

    conversationSettings AppConversationSettings?
    pagesSettings        AppPageSettings[]
    formsSettings        AppFormSettings[]
    filesSettings        AppFileSettings?

    planMetrics PlanMetrics[]
}

model AppSubmission {
    id String @id

    title      String
    stage      AppSubmissionStage @default(Draft)
    createdAt  DateTime?          @default(now())
    lastUpdate DateTime?

    app   App    @relation(fields: [appId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    appId String

    appSubmissionUser   AppSubmissionUserMap[]
    appConversationData AppConversationData[]
}

model AppSubmissionUserMap {
    id Int @id @default(autoincrement())

    role AppSubmissionRole

    user            User          @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId          String
    bot             Bot?          @relation(fields: [botId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    botId           String?
    appSubmission   AppSubmission @relation(fields: [appSubmissionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    appSubmissionId String
}

model AppConversationSettings {
    id String @id

    createdAt  DateTime? @default(now())
    lastUpdate DateTime?

    app   App    @relation(fields: [appId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    appId String @unique

    planMetrics PlanMetrics[]
}

model AppPageSettings {
    id String @id

    name       String
    entryPoint Boolean
    content    String
    createdAt  DateTime? @default(now())
    lastUpdate DateTime?

    app   App    @relation(fields: [appId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    appId String

    planMetrics PlanMetrics[]
}

model AppFormSettings {
    id String @id

    name       String
    fields     Json[]
    fieldCount Int?
    createdAt  DateTime? @default(now())
    lastUpdate DateTime?

    app   App    @relation(fields: [appId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    appId String

    planMetrics PlanMetrics[]
}

model AppFileSettings {
    id String @id

    enable     Boolean
    createdAt  DateTime? @default(now())
    lastUpdate DateTime?

    app   App    @relation(fields: [appId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    appId String @unique

    planMetrics PlanMetrics[]
}

model AppConversationData {
    id Int @id @default(autoincrement())

    type       AppConversationDataMessageType
    message    String
    createdAt  DateTime?                      @default(now())
    lastUpdate DateTime?

    appSubmission   AppSubmission? @relation(fields: [appSubmissionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    appSubmissionId String?
}

enum AppInstanceType {
    SingleInstanceSingleUser
    SingleInstanceMultiUser
    MultiInstanceSingleUser
    MultiInstanceMultiUser
}

enum Visibility {
    PrivateNoOne
    PrivateAnyOneWithLink
    PrivateOsUsers
    Public
}

enum AppStatus {
    On
    Off
    Archived
}

enum AppSubmissionRole {
    Owner
    Reviewer
    Reader
}

enum AppSubmissionStage {
    Draft
    Ready
    OnHold
    Closed
    Archived
}

enum AppConversationDataMessageType {
    Normal
    Inline
}

model OperatingSystem {
    id String @id

    name        String
    path        String    @unique
    description String
    overview    String?
    imageUrl    String?
    websiteUrl  String?
    url1        String?
    url2        String?
    url3        String?
    url4        String?
    isVerified  Boolean   @default(false)
    createdAt   DateTime? @default(now())

    userRoleAssignment UserRoleAssignmentMap[]

    workspaces  Workspace[]
    planMetrics PlanMetrics[]
}

model Plan {
    id String @id

    type               PlanType
    status             PlanStatus @default(Active)
    name               String
    description        String
    isDefault          Boolean
    createdAt          DateTime   @default(now())
    updatedAt          DateTime?
    briefFeaturesLabel String
    briefFeatures      Json
    buttonLabel        String
    buttonSignupPath   String

    features      PlanFeatures?
    price         PlanPricing[]
    subscriptions PlanSubscription[]
}

model PlanFeatures {
    id String @id

    maxOs                    Int
    maxOsLabel               String
    maxWorkspaces            Int
    maxWorkspacesLabel       String
    maxApps                  Int
    maxAppsLabel             String
    maxAppConversations      Int
    maxAppConversationsLabel String
    maxAppPages              Int
    maxAppPagesLabel         String
    maxAppForms              Int
    maxAppFormsLabel         String
    maxAppFormFields         Int
    maxAppFormFieldsLabel    String
    maxAppFiles              Int
    maxAppFilesLabel         String

    plan   Plan   @relation(fields: [planId], references: [id], onUpdate: Cascade, onDelete: NoAction)
    planId String @unique
}

model PlanPricing {
    id String @id

    price     String
    currency  PlanPricingCurreny
    cycle     PlanPricingCycle
    createdAt DateTime           @default(now())
    updatedAt DateTime?

    plan   Plan   @relation(fields: [planId], references: [id], onUpdate: Cascade, onDelete: NoAction)
    planId String
}

model PlanBilling {
    id String @id

    status   Int
    dueDate  DateTime
    amount   Float
    provider String

    Subscription   PlanSubscription @relation(fields: [subscriptionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    subscriptionId String
}

model PlanSubscription {
    id String @id

    status    PlanSubscriptionStatus
    startDate DateTime
    endDate   DateTime?
    endReason String?
    createdAt DateTime               @default(now())
    updatedAt DateTime?

    user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId String
    plan   Plan   @relation(fields: [planId], references: [id], onUpdate: Cascade, onDelete: NoAction)
    planId String

    billing PlanBilling[]
    metrics PlanMetrics[]
}

model PlanMetrics {
    id Int @id @default(autoincrement())

    type  PlanMetricsType
    value Json?

    // usedOs          Int
    // usedWorkspaces  Int
    // usedApps        Int
    // usedForms       Int
    // usedPages       Int
    // usedFileStorage Int

    subscription   PlanSubscription @relation(fields: [subscriptionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    subscriptionId String

    os          OperatingSystem? @relation(fields: [osId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    osId        String?
    workspace   Workspace?       @relation(fields: [workspaceId], references: [relId], onUpdate: Cascade, onDelete: Cascade)
    workspaceId Int?

    app                       App?                     @relation(fields: [appId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    appId                     String?
    appConversationSettings   AppConversationSettings? @relation(fields: [appConversationSettingsId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    appConversationSettingsId String?
    appPageSettings           AppPageSettings?         @relation(fields: [appPageSettingsId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    appPageSettingsId         String?
    appFormSettings           AppFormSettings?         @relation(fields: [appFormSettingsId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    appFormSettingsId         String?
    appFileSettings           AppFileSettings?         @relation(fields: [appFileSettingsId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    appFileSettingsId         String?
}

enum PlanType {
    Free
    Standard
    Professional
    Enterprise
}

enum PlanStatus {
    Active
    Archived
}

enum PlanPricingCurreny {
    Dollar
    Euro
    TurkishLira
}

enum PlanPricingCycle {
    Monthly
    Yearly
}

enum PlanSubscriptionStatus {
    Active
    Expired
    Upgraded
    DownGraded
    Canceled
}

enum PlanMetricsType {
    Os
    Workspace
    App
    AppConversation
    AppForm
    AppFormField
    AppPage
    AppFile
}

model User {
    id String @id @default(cuid())

    name          String?
    email         String    @unique
    emailVerified DateTime?
    password      String?
    passwordSalt  String?
    birthday      DateTime?
    country       String?
    image         String?
    createdAt     DateTime  @default(now())
    status        Int       @default(1)

    accounts Account[]
    sessions Session[]

    roleAssignments   UserRoleAssignmentMap[]
    appSubmissionUser AppSubmissionUserMap[]

    planSubscriptions PlanSubscription[]
}

model Account {
    id String @id @default(cuid())

    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId String

    @@unique([provider, providerAccountId])
}

model Session {
    id String @id @default(cuid())

    sessionToken String   @unique
    expires      DateTime

    user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId String
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Bot {
    id String @id @default(cuid())

    name      String?
    email     String   @unique
    createdAt DateTime @default(now())
    status    Int      @default(1)

    roleAssignments   UserRoleAssignmentMap[]
    appSubmissionUser AppSubmissionUserMap[]
}

model UserRoleAssignmentMap {
    id String @id @default(cuid())

    role      PermissionRole
    type      PermissionType
    createdAt DateTime       @default(now())

    user        User             @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId      String
    bot         Bot?             @relation(fields: [botId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    botId       String?
    os          OperatingSystem? @relation(fields: [osId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    osId        String?
    workspace   Workspace?       @relation(fields: [workspaceId], references: [relId], onUpdate: Cascade, onDelete: Cascade)
    workspaceId Int?
    app         App?             @relation(fields: [appId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    appId       String?
}

enum PermissionRole {
    Owner
    Admin
    Member
    Viewer
    Contributer
    Guest
}

enum PermissionType {
    OS
    Workspace
    App
}

// model Role {
//     id String @id @default(cuid())

//     name String @unique

//     permissions     RolePermission[]
//     roleAssignments UserRoleAssignmentMap[]
// }

// model RolePermission {
//     id String @id @default(cuid())

//     name   String
//     score  Int
//     role   Role   @relation(fields: [roleId], references: [id])
//     roleId String
// }

model Workspace {
    relId Int @id @default(autoincrement())

    id          String
    name        String
    path        String   @unique
    description String?
    accessType  Int?
    imageUrl    String?
    createdAt   DateTime @default(now())

    userRoleAssignment UserRoleAssignmentMap[]
    planMetrics        PlanMetrics[]

    os   OperatingSystem @relation(fields: [osId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    osId String

    @@unique(fields: [osId, id])
}

